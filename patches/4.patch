From e5fdc6f10b2ada86114da08e77a9c6463a5d6ce0 Mon Sep 17 00:00:00 2001
From: Clifford Roche <1007595+cmroche@users.noreply.github.com>
Date: Sun, 11 Aug 2024 15:53:08 -0400
Subject: [PATCH 1/3] Fix invalid device state after bind

Immediately call for as state update as soon as the device is bound, add a signal that can be used to check that the device has received it's first state update.
---
 greeclimate/device.py  | 25 +++++++++++-------
 greeclimate/network.py |  5 ++--
 tests/test_device.py   | 60 ++++++++++++++++++++++++++++--------------
 3 files changed, 57 insertions(+), 33 deletions(-)

diff --git a/greeclimate/device.py b/greeclimate/device.py
index 486a0dc..753a52f 100644
--- a/greeclimate/device.py
+++ b/greeclimate/device.py
@@ -179,6 +179,9 @@ def __init__(self, device_info: DeviceInfo, timeout: int = 120, bind_timeout: in
         self._properties = {}
         self._dirty = []
 
+        self._valid_state: asyncio.Event = asyncio.Event()
+        self._valid_state.clear()
+
     async def bind(
         self,
         key: str = None,
@@ -244,12 +247,14 @@ async def bind(
     async def __bind_internal(self, cipher: Union[CipherV1, CipherV2]):
         """Internal binding procedure, do not call directly"""
         await self.send(self.create_bind_message(self.device_info), cipher=cipher)
-        task = asyncio.create_task(self.ready.wait())
+        task = self._loop.create_task(self.ready.wait())
         await asyncio.wait_for(task, timeout=self._bind_timeout)
 
     def handle_device_bound(self, key: str) -> None:
         """Handle the device bound message from the device"""
+        DeviceProtocol2.handle_device_bound(self, key)
         self.device_cipher.key = key
+        self._loop.create_task(self.update_state())
 
     async def request_version(self) -> None:
         """Request the firmware version from the device."""
@@ -262,11 +267,8 @@ async def request_version(self) -> None:
         except asyncio.TimeoutError:
             raise DeviceTimeoutError
 
-    async def update_state(self, wait_for: float = 30):
+    async def update_state(self):
         """Update the internal state of the device structure of the physical device, 0 for no wait
-
-        Args:
-            wait_for (object): How long to wait for an update from the device
         """
         if not self.device_cipher:
             await self.bind()
@@ -303,12 +305,11 @@ def handle_state_update(self, **kwargs) -> None:
                 self.version = "4.0"
                 self._logger.info(f"Device version changed to {self.version}, hid {self.hid}")
             self._logger.debug(f"Using device temperature {self.current_temperature}")
+            
+        self._valid_state.set()
 
-    async def push_state_update(self, wait_for: float = 30):
+    async def push_state_update(self):
         """Push any pending state updates to the unit
-
-        Args:
-            wait_for (object): How long to wait for an update from the device, 0 for no wait
         """
         if not self._dirty:
             return
@@ -367,7 +368,11 @@ def set_property(self, name, value):
             self._properties[name.value] = value
             if name.value not in self._dirty:
                 self._dirty.append(name.value)
-
+                
+    @property
+    def has_valid_state(self) -> bool:
+        return self._valid_state.is_set() 
+    
     @property
     def power(self) -> bool:
         return bool(self.get_property(Props.POWER))
diff --git a/greeclimate/network.py b/greeclimate/network.py
index b8e432b..e07480c 100644
--- a/greeclimate/network.py
+++ b/greeclimate/network.py
@@ -190,7 +190,7 @@ def __init__(self, timeout: int = 10, drained: asyncio.Event = None) -> None:
         DeviceProtocolBase2.__init__(self, timeout, drained)
         self._ready = asyncio.Event()
         self._ready.clear()
-
+        
     @property
     def ready(self) -> asyncio.Event:
         return self._ready
@@ -248,12 +248,11 @@ def handle_unknown_packet(self, obj, addr: IPAddr) -> None:
         _LOGGER.warning("Received unknown packet from %s:\n%s", addr[0], json.dumps(obj))
 
     def __handle_device_bound(self, key: str) -> None:
-        self._ready.set()
         self.handle_device_bound(key)
 
     def handle_device_bound(self, key: str) -> None:
         """ Implement this function to handle device bound events. """
-        pass
+        self._ready.set()
 
     def __handle_state_update(self, data) -> None:
         self.handle_state_update(**data)
diff --git a/tests/test_device.py b/tests/test_device.py
index 111953b..2fb8727 100644
--- a/tests/test_device.py
+++ b/tests/test_device.py
@@ -206,33 +206,35 @@ async def test_device_bind(cipher, send):
     """Check that the device returns a device key when binding."""
 
     info = DeviceInfo(*get_mock_info())
-    device = Device(info, timeout=1)
+    device = Device(info, timeout=1, bind_timeout=1)
     fake_key = "abcdefgh12345678"
     
     def fake_send(*args, **kwargs):
         """Emulate a bind event"""
-        device.device_cipher = CipherV1(fake_key.encode())
-        device.ready.set()
-        device.handle_device_bound(fake_key)
+        if not device.ready.is_set():
+            device.device_cipher = CipherV1(fake_key.encode())
+            device.handle_device_bound(fake_key)
+        else:
+            device.handle_state_update(**get_mock_state())
     send.side_effect = fake_send
 
     assert device.device_info == info
     await device.bind()
-    assert send.call_count == 1
+    assert send.call_count == 2   # 1 for bind, 2 for update_state
 
     assert device.device_cipher is not None
     assert device.device_cipher.key == fake_key
     
     # Bind with cipher already set
     await device.bind()
-    assert send.call_count == 2 
+    assert send.call_count == 3 
 
 
 @pytest.mark.asyncio
 async def test_device_bind_timeout(cipher, send):
     """Check that the device handles timeout errors when binding."""
     info = DeviceInfo(*get_mock_info())
-    device = Device(info, timeout=1)
+    device = Device(info, timeout=1, bind_timeout=1)
 
     with pytest.raises(DeviceTimeoutError):
         await device.bind()
@@ -245,7 +247,7 @@ async def test_device_bind_timeout(cipher, send):
 async def test_device_bind_none(cipher, send):
     """Check that the device handles bad binding sequences."""
     info = DeviceInfo(*get_mock_info())
-    device = Device(info)
+    device = Device(info, timeout=1, bind_timeout=1)
 
     def fake_send(*args, **kwargs):
         device.ready.set()
@@ -262,17 +264,19 @@ def fake_send(*args, **kwargs):
 async def test_device_late_bind_from_update(cipher, send):
     """Check that the device handles late binding sequences."""
     info = DeviceInfo(*get_mock_info())
-    device = Device(info, timeout=1)
+    device = Device(info, timeout=1, bind_timeout=1)
     fake_key = "abcdefgh12345678"
 
     def fake_send(*args, **kwargs):
-        device.device_cipher = CipherV1(fake_key.encode())
-        device.handle_device_bound(fake_key)
-        device.ready.set()
+        if not device.ready.is_set():
+            device.device_cipher = CipherV1(fake_key.encode())
+            device.handle_device_bound(fake_key)
+        else:
+            device.handle_state_update(**get_mock_state())
     send.side_effect = fake_send
 
     await device.update_state()
-    assert send.call_count == 2
+    assert send.call_count == 3
     assert device.device_cipher.key == fake_key
 
     device.power = True
@@ -288,17 +292,19 @@ def fake_send(*args, **kwargs):
 async def test_device_late_bind_from_request_version(cipher, send):
     """Check that the device handles late binding sequences."""
     info = DeviceInfo(*get_mock_info())
-    device = Device(info, timeout=1)
+    device = Device(info, timeout=1, bind_timeout=1)
     fake_key = "abcdefgh12345678"
 
     def fake_send(*args, **kwargs):
-        device.device_cipher = CipherV1(fake_key.encode())
-        device.handle_device_bound(fake_key)
-        device.ready.set()
+        if not device.ready.is_set():
+            device.device_cipher = CipherV1(fake_key.encode())
+            device.handle_device_bound(fake_key)
+        else:
+            device.handle_state_update(**get_mock_state())
     send.side_effect = fake_send
 
     await device.request_version()
-    assert send.call_count == 2
+    assert send.call_count == 3
     assert device.device_cipher.key == fake_key
     
     
@@ -306,7 +312,7 @@ def fake_send(*args, **kwargs):
 async def test_device_bind_no_cipher(cipher, send):
     """Check that the device handles late binding sequences."""
     info = DeviceInfo(*get_mock_info())
-    device = Device(info, timeout=1)
+    device = Device(info, timeout=1, bind_timeout=1)
     fake_key = "abcdefgh12345678"
     
     with pytest.raises(ValueError):
@@ -316,7 +322,7 @@ async def test_device_bind_no_cipher(cipher, send):
 @pytest.mark.asyncio
 async def test_device_bind_no_device_info(cipher, send):
     """Check that the device handles late binding sequences."""
-    device = Device(None, timeout=1)
+    device = Device(None, timeout=1, bind_timeout=1)
     
     with pytest.raises(DeviceNotBoundError):
         await device.bind()
@@ -733,4 +739,18 @@ def test_device_key_set_get():
     device.device_cipher = CipherV1()
     device.device_key = "fake_key"
     assert device.device_key == "fake_key"
+    
+    
+@pytest.mark.asyncio
+async def has_valid_state_with_valid_properties(cipher, send):
+    """Check that the device has a valid state with valid properties."""
+    device = await generate_device_mock_async()
+
+    def fake_send(*args, **kwargs):
+        state = get_mock_state()
+        device.handle_state_update(**state)
+    send.side_effect = fake_send
+
+    await device.update_state()
+    assert device.has_valid_state() is True
     
\ No newline at end of file

From dd00f5e14650f3b0ad19df9c8ee68801eacdeff5 Mon Sep 17 00:00:00 2001
From: Clifford Roche <1007595+cmroche@users.noreply.github.com>
Date: Sun, 11 Aug 2024 16:04:34 -0400
Subject: [PATCH 2/3] Fix invalid device state after bind Add test for
 request_version with timeout

---
 tests/test_device.py | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/tests/test_device.py b/tests/test_device.py
index 2fb8727..d83e1c3 100644
--- a/tests/test_device.py
+++ b/tests/test_device.py
@@ -753,4 +753,14 @@ def fake_send(*args, **kwargs):
 
     await device.update_state()
     assert device.has_valid_state() is True
-    
\ No newline at end of file
+   
+   
+@pytest.mark.asyncio
+async def request_version_timeout_error(cipher, send):
+    """Check that request_version raises DeviceTimeoutError when a timeout occurs."""
+    device = await generate_device_mock_async()
+
+    send.side_effect = asyncio.TimeoutError
+
+    with pytest.raises(DeviceTimeoutError):
+        await device.request_version() 
\ No newline at end of file

From fbf9748af182630e150f827ce60b2a994c62aafc Mon Sep 17 00:00:00 2001
From: Clifford Roche <1007595+cmroche@users.noreply.github.com>
Date: Sun, 11 Aug 2024 16:08:12 -0400
Subject: [PATCH 3/3] Formatting, bugs

---
 tests/test_device.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/tests/test_device.py b/tests/test_device.py
index d83e1c3..8706477 100644
--- a/tests/test_device.py
+++ b/tests/test_device.py
@@ -752,7 +752,7 @@ def fake_send(*args, **kwargs):
     send.side_effect = fake_send
 
     await device.update_state()
-    assert device.has_valid_state() is True
+    assert device.has_valid_state is True
    
    
 @pytest.mark.asyncio
@@ -763,4 +763,4 @@ async def request_version_timeout_error(cipher, send):
     send.side_effect = asyncio.TimeoutError
 
     with pytest.raises(DeviceTimeoutError):
-        await device.request_version() 
\ No newline at end of file
+        await device.request_version() 
